#!/usr/bin/env bash

# Proxmox Server Setup Script
# Author: Daniel Brunod
# License: MIT
# This script is used for setting up a Proxmox server from scratch

header_info() {
  clear
  cat <<"EOF"

 ██████╗██████╗  █████╗ ███████╗████████╗███████╗
██╔════╝██╔══██╗██╔══██╗██╔════╝╚══██╔══╝╚══███╔╝
██║     ██████╔╝███████║█████╗     ██║     ███╔╝ 
██║     ██╔══██╗██╔══██║██╔══╝     ██║    ███╔╝  
╚██████╗██║  ██║██║  ██║██║        ██║   ███████╗
 ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝        ╚═╝   ╚══════╝                                              
          
      After Install Script for Proxmox
            by Daniel Brunod
         

EOF
}

# Colors for messages
RD=$(echo "\033[01;31m")
YW=$(echo "\033[33m")
GN=$(echo "\033[1;92m")
CL=$(echo "\033[m")
BFR="\\r\\033[K"
HOLD="-"
CM="${GN}✓${CL}"
CROSS="${RD}✗${CL}"

# Set script to exit on error and inherit the error flags
set -euo pipefail
shopt -s inherit_errexit nullglob

# Message functions
msg_info() {
  local msg="$1"
  echo -ne " ${HOLD} ${YW}${msg}..."
}

msg_ok() {
  local msg="$1"
  echo -e "${BFR} ${CM} ${GN}${msg}${CL}"
}

msg_error() {
  local msg="$1"
  echo -e "${BFR} ${CROSS} ${RD}${msg}${CL}"
}

# Function to update and upgrade Proxmox
update_proxmox() {
  msg_info "Updating Proxmox VE"
  apt update && apt upgrade -y &>/dev/null
  msg_ok "Proxmox VE Updated"
  echo ""
  read -p "Press Enter to continue..."
}

# Function to modify DNS configuration
modify_dns() {
  local resolv_file="/etc/resolv.conf"
  local bak_file="${resolv_file}.bak"

  msg_info "Checking current DNS configuration"
  
  # Display current nameservers
  echo "Current DNS nameservers:"
  grep -E '^nameserver' $resolv_file || echo "No nameservers found."

  echo ""
  read -p "Press Enter to continue..."

  CHOICE=$(whiptail --backtitle "Proxmox Server Setup" --title "DNS Configuration" --menu "Choose what to do with the current DNS configuration:" 15 60 3 \
  "1" "Keep current DNS configuration" \
  "2" "Set new DNS servers" \
  "3" "Exit to menu" 3>&2 2>&1 1>&3)

  case $CHOICE in
    1)
      msg_ok "Keeping current DNS configuration"
      echo ""
      read -p "Press Enter to continue..."
      ;;
    2)
      msg_info "Setting new DNS servers"
      # Present DNS options to the user
      NEW_DNS=$(whiptail --backtitle "Proxmox Server Setup" --title "Choose DNS Servers" --menu "Select a DNS option:" 15 60 4 \
      "1" "Cloudflare (1.1.1.1, 1.0.0.1)" \
      "2" "Cloudflare Malware Protection (1.1.1.2, 1.0.0.2)" \
      "3" "Cloudflare Malware & Adult Content Filter (1.1.1.3, 1.0.0.3)" \
      "4" "Google DNS (8.8.8.8, 8.8.4.4)" 3>&2 2>&1 1>&3)

      # Create a backup of the current resolv.conf
      if [[ -f $bak_file ]]; then
        msg_info "Backup file $bak_file already exists, it will be overwritten"
      else
        msg_info "Creating backup of current DNS configuration at $bak_file"
      fi
      cp $resolv_file $bak_file
      msg_ok "Backup created at $bak_file"

      # Comment out all existing nameserver entries
      sed -i 's/^nameserver/#&/' $resolv_file

      # Set new nameservers based on user choice, descomentando se existirem ou adicionando se não
      case $NEW_DNS in
        1)
          grep -q '^nameserver 1.1.1.1' $resolv_file || echo "nameserver 1.1.1.1" >> $resolv_file
          grep -q '^nameserver 1.0.0.1' $resolv_file || echo "nameserver 1.0.0.1" >> $resolv_file
          msg_ok "Cloudflare DNS configured"
          ;;
        2)
          grep -q '^nameserver 1.1.1.2' $resolv_file || echo "nameserver 1.1.1.2" >> $resolv_file
          grep -q '^nameserver 1.0.0.2' $resolv_file || echo "nameserver 1.0.0.2" >> $resolv_file
          msg_ok "Cloudflare DNS with Malware Protection configured"
          ;;
        3)
          grep -q '^nameserver 1.1.1.3' $resolv_file || echo "nameserver 1.1.1.3" >> $resolv_file
          grep -q '^nameserver 1.0.0.3' $resolv_file || echo "nameserver 1.0.0.3" >> $resolv_file
          msg_ok "Cloudflare DNS with Malware & Adult Content Protection configured"
          ;;
        4)
          grep -q '^nameserver 8.8.8.8' $resolv_file || echo "nameserver 8.8.8.8" >> $resolv_file
          grep -q '^nameserver 8.8.4.4' $resolv_file || echo "nameserver 8.8.4.4" >> $resolv_file
          msg_ok "Google DNS configured"
          ;;
      esac

      # Test the DNS with a ping to GitHub
      if ping -c 1 github.com &>/dev/null; then
        msg_ok "DNS configuration is working correctly"
      else
        msg_error "DNS configuration failed, please check your settings"
      fi

      echo ""
      read -p "Press Enter to continue..."
      ;;
    3)
      msg_info "Returning to the main menu"
      ;;
  esac
}

# Function to modify repositories (non-production and enterprise)
modify_repos() {
  local pve_repo_file="/etc/apt/sources.list"
  local enterprise_repo_file="/etc/apt/sources.list.d/pve-enterprise.list"
  local ceph_repo_file="/etc/apt/sources.list.d/ceph.list"

  msg_info "Checking existing repository configuration"

  # Display current repository configuration
  echo "Current Proxmox Repositories:"
  grep -E '^deb' $pve_repo_file || echo "No repositories found in $pve_repo_file"

  echo "Enterprise Repositories:"
  grep -E '^deb' $enterprise_repo_file || echo "No repositories found in $enterprise_repo_file"

  echo "Ceph Repositories:"
  grep -E '^deb' $ceph_repo_file || echo "No repositories found in $ceph_repo_file"

  echo ""
  read -p "Press Enter to continue..."

  CHOICE=$(whiptail --backtitle "Proxmox Server Setup" --title "Repository Configuration" --menu "Choose an action:" 15 60 4 \
  "1" "Switch to Non-Production Repositories" \
  "2" "Switch to Enterprise Repositories" \
  "3" "Exit to menu" 3>&2 2>&1 1>&3)

  case $CHOICE in
    1)  # Switch to Non-Production Repositories
      msg_info "Switching to Non-Production Repositories"

      # Backup current repository files
      cp $pve_repo_file ${pve_repo_file}.bak
      cp $enterprise_repo_file ${enterprise_repo_file}.bak
      cp $ceph_repo_file ${ceph_repo_file}.bak
      msg_ok "Backup created for repository files"

      # Check and descomentar ou incluir os repositórios não-produção
      if grep -q '^#deb http://download.proxmox.com/debian/pve' $pve_repo_file; then
        # Descomentar se estiver comentado
        sed -i 's|^#deb http://download.proxmox.com/debian/pve|deb http://download.proxmox.com/debian/pve|' $pve_repo_file
        msg_ok "Descomentado Proxmox non-production repository"
      elif ! grep -q '^deb http://download.proxmox.com/debian/pve' $pve_repo_file; then
        # Adicionar se não existir
        echo -e "\n# NOT recommended for production use" >> $pve_repo_file
        echo "deb http://download.proxmox.com/debian/pve bookworm pve-no-subscription" >> $pve_repo_file
        msg_ok "Adicionado Proxmox non-production repository"
      fi

      if grep -q '^#deb http://download.proxmox.com/debian/ceph-quincy' $pve_repo_file; then
        # Descomentar se estiver comentado
        sed -i 's|^#deb http://download.proxmox.com/debian/ceph-quincy|deb http://download.proxmox.com/debian/ceph-quincy|' $pve_repo_file
        msg_ok "Descomentado Ceph non-production repository"
      elif ! grep -q '^deb http://download.proxmox.com/debian/ceph-quincy' $pve_repo_file; then
        # Adicionar se não existir
        echo -e "\n# Not for production ceph" >> $pve_repo_file
        echo "deb http://download.proxmox.com/debian/ceph-quincy bookworm no-subscription" >> $pve_repo_file
        msg_ok "Adicionado Ceph non-production repository"
      fi

      # Comentar os repositórios enterprise
      sed -i 's|^deb https://enterprise.proxmox.com/debian/pve|#deb https://enterprise.proxmox.com/debian/pve|' $enterprise_repo_file
      sed -i 's|^deb https://enterprise.proxmox.com/debian/ceph|#deb https://enterprise.proxmox.com/debian/ceph|' $ceph_repo_file

      msg_ok "Switched to Non-Production Repositories"
      echo ""
      read -p "Press Enter to continue..."
      ;;
      
    2)  # Switch to Enterprise Repositories
      msg_info "Switching to Enterprise Repositories"

      # Comentar os repositórios não-produção
      sed -i 's|^deb http://download.proxmox.com/debian/pve|#deb http://download.proxmox.com/debian/pve|' $pve_repo_file
      sed -i 's|^deb http://download.proxmox.com/debian/ceph-quincy|#deb http://download.proxmox.com/debian/ceph-quincy|' $pve_repo_file

      # Descomentar os repositórios enterprise se estiverem comentados
      if grep -q '^#deb https://enterprise.proxmox.com/debian/pve' $enterprise_repo_file; then
        sed -i 's|^#deb https://enterprise.proxmox.com/debian/pve|deb https://enterprise.proxmox.com/debian/pve|' $enterprise_repo_file
        msg_ok "Descomentado Proxmox enterprise repository"
      fi

      if grep -q '^#deb https://enterprise.proxmox.com/debian/ceph' $ceph_repo_file; then
        sed -i 's|^#deb https://enterprise.proxmox.com/debian/ceph|deb https://enterprise.proxmox.com/debian/ceph|' $ceph_repo_file
        msg_ok "Descomentado Ceph enterprise repository"
      fi

      msg_ok "Switched to Enterprise Repositories"
      echo ""
      read -p "Press Enter to continue..."
      ;;
      
    3)  # Return to menu
      msg_info "Returning to the main menu"
      ;;
  esac
}

# Main menu loop
main_menu() {
  while true; do
    CHOICE=$(whiptail --backtitle "Proxmox Server Setup" --title "Main Menu" --menu "Choose an option:" 15 60 4 \
    "1" "Update and Upgrade Proxmox" \
    "2" "Modify DNS Configuration" \
    "3" "Modify Repositories" \
    "4" "Exit" 3>&2 2>&1 1>&3)

    case $CHOICE in
      1)
        update_proxmox
        ;;
      2)
        modify_dns
        ;;
      3)
        modify_repos
        ;;
      4)
        clear
        exit 0
        ;;
      *)
        echo "Invalid option, please select again."
        ;;
    esac
  done
}

# Start the script
header_info
read -p "Press Enter to continue..."
main_menu
