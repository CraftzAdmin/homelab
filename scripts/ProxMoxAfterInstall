#!/usr/bin/env bash

# Proxmox Server Setup Script
# Author: Daniel Brunod
# License: MIT
# This script is used for setting up a Proxmox server from scratch

header_info() {
  clear
  cat <<"EOF"

 ██████╗██████╗  █████╗ ███████╗████████╗███████╗
██╔════╝██╔══██╗██╔══██╗██╔════╝╚══██╔══╝╚══███╔╝
██║     ██████╔╝███████║█████╗     ██║     ███╔╝ 
██║     ██╔══██╗██╔══██║██╔══╝     ██║    ███╔╝  
╚██████╗██║  ██║██║  ██║██║        ██║   ███████╗
 ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝        ╚═╝   ╚══════╝                                              
          
    After Install Script for Proxmox -V9
            by Daniel Brunod
         

EOF
}

# Colors for messages
RD=$(echo "\033[01;31m")
YW=$(echo "\033[33m")
GN=$(echo "\033[1;92m")
CL=$(echo "\033[m")
BFR="\\r\\033[K"
HOLD="-"
CM="${GN}✓${CL}"
CROSS="${RD}✗${CL}"

# Set script to exit on error and inherit the error flags
set -euo pipefail
shopt -s inherit_errexit nullglob

# Message functions
msg_info() {
  local msg="$1"
  echo -ne " ${HOLD} ${YW}${msg}..."
}

msg_ok() {
  local msg="$1"
  echo -e "${BFR} ${CM} ${GN}${msg}${CL}"
}

msg_error() {
  local msg="$1"
  echo -e "${BFR} ${CROSS} ${RD}${msg}${CL}"
}

# Function to update and upgrade Proxmox
update_proxmox() {
  msg_info "Updating Proxmox VE"
  apt update && apt upgrade -y &>/dev/null
  msg_ok "Proxmox VE Updated"
  echo ""
  read -p "Press Enter to continue..."
}

# Function to modify DNS configuration
modify_dns() {
  local resolv_file="/etc/resolv.conf"
  local bak_file="${resolv_file}.bak"

  msg_info "Checking current DNS configuration"
  
  # Display current nameservers
  echo "Current DNS nameservers:"
  grep -E '^nameserver' $resolv_file || echo "No nameservers found."

  echo ""
  read -p "Press Enter to continue..."

  CHOICE=$(whiptail --backtitle "Proxmox Server Setup" --title "DNS Configuration" --menu "Choose what to do with the current DNS configuration:" 15 60 3 \
  "1" "Keep current DNS configuration" \
  "2" "Set new DNS servers" \
  "3" "Exit to menu" 3>&2 2>&1 1>&3)

  case $CHOICE in
    1)
      msg_ok "Keeping current DNS configuration"
      echo ""
      read -p "Press Enter to continue..."
      ;;
    2)
      msg_info "Setting new DNS servers"
      # Present DNS options to the user
      NEW_DNS=$(whiptail --backtitle "Proxmox Server Setup" --title "Choose DNS Servers" --menu "Select a DNS option:" 15 60 4 \
      "1" "Cloudflare (1.1.1.1, 1.0.0.1)" \
      "2" "Cloudflare Malware Protection (1.1.1.2, 1.0.0.2)" \
      "3" "Cloudflare Malware & Adult Content Filter (1.1.1.3, 1.0.0.3)" \
      "4" "Google DNS (8.8.8.8, 8.8.4.4)" 3>&2 2>&1 1>&3)

      # Create a backup of the current resolv.conf
      if [[ -f $bak_file ]]; then
        msg_info "Backup file $bak_file already exists, it will be overwritten"
      else
        msg_info "Creating backup of current DNS configuration at $bak_file"
      fi
      cp $resolv_file $bak_file
      msg_ok "Backup created at $bak_file"

      # Comment out all existing nameserver entries
      sed -i 's/^nameserver/#&/' $resolv_file

      # Set new nameservers based on user choice, only adding if they don't exist, or uncommenting if found commented
      case $NEW_DNS in
        1)
          if grep -q '^#nameserver 1.1.1.1' $resolv_file; then
            sed -i 's|^#nameserver 1.1.1.1|nameserver 1.1.1.1|' $resolv_file
          elif ! grep -q '^nameserver 1.1.1.1' $resolv_file; then
            echo "nameserver 1.1.1.1" >> $resolv_file
          fi
          
          if grep -q '^#nameserver 1.0.0.1' $resolv_file; then
            sed -i 's|^#nameserver 1.0.0.1|nameserver 1.0.0.1|' $resolv_file
          elif ! grep -q '^nameserver 1.0.0.1' $resolv_file; then
            echo "nameserver 1.0.0.1" >> $resolv_file
          fi
          msg_ok "Cloudflare DNS configured"
          ;;
          
        2)
          if grep -q '^#nameserver 1.1.1.2' $resolv_file; then
            sed -i 's|^#nameserver 1.1.1.2|nameserver 1.1.1.2|' $resolv_file
          elif ! grep -q '^nameserver 1.1.1.2' $resolv_file; then
            echo "nameserver 1.1.1.2" >> $resolv_file
          fi
          
          if grep -q '^#nameserver 1.0.0.2' $resolv_file; then
            sed -i 's|^#nameserver 1.0.0.2|nameserver 1.0.0.2|' $resolv_file
          elif ! grep -q '^nameserver 1.0.0.2' $resolv_file; then
            echo "nameserver 1.0.0.2" >> $resolv_file
          fi
          msg_ok "Cloudflare DNS with Malware Protection configured"
          ;;
          
        3)
          if grep -q '^#nameserver 1.1.1.3' $resolv_file; then
            sed -i 's|^#nameserver 1.1.1.3|nameserver 1.1.1.3|' $resolv_file
          elif ! grep -q '^nameserver 1.1.1.3' $resolv_file; then
            echo "nameserver 1.1.1.3" >> $resolv_file
          fi
          
          if grep -q '^#nameserver 1.0.0.3' $resolv_file; then
            sed -i 's|^#nameserver 1.0.0.3|nameserver 1.0.0.3|' $resolv_file
          elif ! grep -q '^nameserver 1.0.0.3' $resolv_file; then
            echo "nameserver 1.0.0.3" >> $resolv_file
          fi
          msg_ok "Cloudflare DNS with Malware & Adult Content Protection configured"
          ;;
          
        4)
          if grep -q '^#nameserver 8.8.8.8' $resolv_file; then
            sed -i 's|^#nameserver 8.8.8.8|nameserver 8.8.8.8|' $resolv_file
          elif ! grep -q '^nameserver 8.8.8.8' $resolv_file; then
            echo "nameserver 8.8.8.8" >> $resolv_file
          fi
          
          if grep -q '^#nameserver 8.8.4.4' $resolv_file; then
            sed -i 's|^#nameserver 8.8.4.4|nameserver 8.8.4.4|' $resolv_file
          elif ! grep -q '^nameserver 8.8.4.4' $resolv_file; then
            echo "nameserver 8.8.4.4" >> $resolv_file
          fi
          msg_ok "Google DNS configured"
          ;;
      esac

      # Test the DNS with a ping to GitHub
      if ping -c 1 github.com &>/dev/null; then
        msg_ok "DNS configuration is working correctly"
      else
        msg_error "DNS configuration failed, please check your settings"
      fi

      echo ""
      read -p "Press Enter to continue..."
      ;;
    3)
      msg_info "Returning to the main menu"
      ;;
  esac
}

# Function to display active repositories
display_active_repos() {
  local pve_repo_file="/etc/apt/sources.list"
  local enterprise_repo_file="/etc/apt/sources.list.d/pve-enterprise.list"
  local ceph_repo_file="/etc/apt/sources.list.d/ceph.list"

  msg_info "Checking existing repository configuration in $pve_repo_file"

  # Check standard Debian repositories
  if grep -q '^deb http://deb.debian.org/debian bookworm main contrib' $pve_repo_file && \
     grep -q '^deb http://deb.debian.org/debian bookworm-updates main contrib' $pve_repo_file && \
     grep -q '^deb http://security.debian.org/debian-security bookworm-security main contrib' $pve_repo_file; then
    msg_ok "Default Debian repositories are active"
  else
    msg_error "Default Debian repositories are missing or commented"
  fi

  # Check if non-subscription repository is active or commented
  if grep -q '^deb http://download.proxmox.com/debian/pve bookworm pve-no-subscription' $pve_repo_file; then
    msg_ok "Non-subscription repository is active"
  elif grep -q '^# *deb http://download.proxmox.com/debian/pve bookworm pve-no-subscription' $pve_repo_file; then
    msg_info "Non-subscription repository is commented"
  else
    msg_error "Non-subscription repository is missing"
  fi

  # Check enterprise repository in pve-enterprise.list
  msg_info "Checking Proxmox enterprise repository in $enterprise_repo_file"
  if grep -q '^deb https://enterprise.proxmox.com/debian/pve bookworm pve-enterprise' $enterprise_repo_file; then
    msg_ok "Enterprise repository is active"
  elif grep -q '^# *deb https://enterprise.proxmox.com/debian/pve bookworm pve-enterprise' $enterprise_repo_file; then
    msg_info "Enterprise repository is commented"
  else
    msg_error "Enterprise repository is missing"
  fi

  # Check enterprise repository in ceph.list
  msg_info "Checking Ceph enterprise repository in $ceph_repo_file"
  if grep -q '^deb https://enterprise.proxmox.com/debian/ceph-quincy bookworm enterprise' $ceph_repo_file; then
    msg_ok "Enterprise Ceph repository is active"
  elif grep -q '^# *deb https://enterprise.proxmox.com/debian/ceph-quincy bookworm enterprise' $ceph_repo_file; then
    msg_info "Enterprise Ceph repository is commented"
  else
    msg_error "Enterprise Ceph repository is missing"
  fi

  echo ""
  read -p "Press Enter to continue..."
}


# Function to modify repositories (non-production and enterprise)
modify_repos() {
  local pve_repo_file="/etc/apt/sources.list"
  local enterprise_repo_file="/etc/apt/sources.list.d/pve-enterprise.list"
  local ceph_repo_file="/etc/apt/sources.list.d/ceph.list"

  # User choice to switch repositories
  CHOICE=$(whiptail --backtitle "Proxmox Server Setup" --title "Repository Configuration" --menu "Choose which repositories to activate:" 15 60 2 \
  "1" "Use Non-Enterprise Repositories" \
  "2" "Use Enterprise Repositories" 3>&2 2>&1 1>&3)

  case $CHOICE in
    1)  # Switch to Non-Production Repositories
      msg_info "Switching to Non-Production Repositories"

      # Comment the enterprise repository in pve-enterprise.list
      if grep -q '^deb https://enterprise.proxmox.com/debian/pve' $enterprise_repo_file; then
        sed -i 's|^deb https://enterprise.proxmox.com/debian/pve|#deb https://enterprise.proxmox.com/debian/pve|' $enterprise_repo_file
        msg_ok "Commented Proxmox enterprise repository"
      fi

      # Add or uncomment non-subscription repository in /etc/apt/sources.list
      if grep -q '^# *deb http://download.proxmox.com/debian/pve' $pve_repo_file; then
        sed -i 's|^# *deb http://download.proxmox.com/debian/pve|deb http://download.proxmox.com/debian/pve|' $pve_repo_file
        msg_ok "Uncommented Proxmox non-production repository"
      elif ! grep -q '^deb http://download.proxmox.com/debian/pve' $pve_repo_file; then
        echo "deb http://download.proxmox.com/debian/pve bookworm pve-no-subscription" >> $pve_repo_file
        msg_ok "Added Proxmox non-production repository"
      fi

      # Comment the enterprise repository in ceph.list
      if grep -q '^deb https://enterprise.proxmox.com/debian/ceph-quincy' $ceph_repo_file; then
        sed -i 's|^deb https://enterprise.proxmox.com/debian/ceph-quincy|#deb https://enterprise.proxmox.com/debian/ceph-quincy|' $ceph_repo_file
        msg_ok "Commented Ceph enterprise repository"
      fi

      # Add or uncomment non-subscription Ceph repository in ceph.list
      if grep -q '^# *deb http://download.proxmox.com/debian/ceph-quincy' $ceph_repo_file; then
        sed -i 's|^# *deb http://download.proxmox.com/debian/ceph-quincy|deb http://download.proxmox.com/debian/ceph-quincy|' $ceph_repo_file
        msg_ok "Uncommented Ceph non-production repository"
      elif ! grep -q '^deb http://download.proxmox.com/debian/ceph-quincy' $ceph_repo_file; then
        echo "deb http://download.proxmox.com/debian/ceph-quincy bookworm no-subscription" >> $ceph_repo_file
        msg_ok "Added Ceph non-production repository"
      fi

      ;;
      
    2)  # Switch to Enterprise Repositories
      msg_info "Switching to Enterprise Repositories"

      # Comment the non-subscription repository in /etc/apt/sources.list
      if grep -q '^deb http://download.proxmox.com/debian/pve' $pve_repo_file; then
        sed -i 's|^deb http://download.proxmox.com/debian/pve|#deb http://download.proxmox.com/debian/pve|' $pve_repo_file
        msg_ok "Commented Proxmox non-production repository"
      fi

      # Add or uncomment enterprise repository in pve-enterprise.list
      if grep -q '^# *deb https://enterprise.proxmox.com/debian/pve' $enterprise_repo_file; then
        sed -i 's|^# *deb https://enterprise.proxmox.com/debian/pve|deb https://enterprise.proxmox.com/debian/pve|' $enterprise_repo_file
        msg_ok "Uncommented Proxmox enterprise repository"
      elif ! grep -q '^deb https://enterprise.proxmox.com/debian/pve' $enterprise_repo_file; then
        echo "deb https://enterprise.proxmox.com/debian/pve bookworm pve-enterprise" >> $enterprise_repo_file
        msg_ok "Added Proxmox enterprise repository"
      fi

      # Comment non-subscription Ceph repository in ceph.list
      if grep -q '^deb http://download.proxmox.com/debian/ceph-quincy' $ceph_repo_file; then
        sed -i 's|^deb http://download.proxmox.com/debian/ceph-quincy|#deb http://download.proxmox.com/debian/ceph-quincy|' $ceph_repo_file
        msg_ok "Commented Ceph non-production repository"
      fi

      # Add or uncomment enterprise Ceph repository in ceph.list
      if grep -q '^# *deb https://enterprise.proxmox.com/debian/ceph-quincy' $ceph_repo_file; then
        sed -i 's|^# *deb https://enterprise.proxmox.com/debian/ceph-quincy|deb https://enterprise.proxmox.com/debian/ceph-quincy|' $ceph_repo_file
        msg_ok "Uncommented Ceph enterprise repository"
      elif ! grep -q '^deb https://enterprise.proxmox.com/debian/ceph-quincy' $ceph_repo_file; then
        echo "deb https://enterprise.proxmox.com/debian/ceph-quincy bookworm enterprise" >> $ceph_repo_file
        msg_ok "Added Ceph enterprise repository"
      fi
      ;;
  esac

  echo ""
  read -p "Press Enter to continue..."
}

# Function to enable PCI Passthrough
enable_pci_passthrough() {
  msg_info "PCI Passthrough allows a physical PCI device to be assigned directly to a virtual machine, bypassing the host system. This is particularly useful for performance-critical applications such as GPU-intensive workloads or high-speed network interfaces."
  
  echo ""
  read -p "Press Enter to continue..."
  
  CHOICE=$(whiptail --backtitle "Proxmox Server Setup" --title "PCI Passthrough Configuration" --menu "Select the chipset type:" 15 60 3 \
  "1" "Intel Chips" \
  "2" "AMD Chips" \
  "3" "Revert PCI Passthrough" 3>&2 2>&1 1>&3)

  case $CHOICE in
    1)
      configure_intel_pci_passthrough
      ;;
    2)
      configure_amd_pci_passthrough
      ;;
    3)
      revert_pci_passthrough
      ;;
    *)
      msg_error "Invalid option selected"
      ;;
  esac
}

# Function to configure Intel PCI Passthrough
configure_intel_pci_passthrough() {
  msg_info "Configuring PCI Passthrough for Intel Chipset"

  # Check if the line exists and comment it
  if grep -q '^GRUB_CMDLINE_LINUX_DEFAULT="quiet"' /etc/default/grub; then
    sed -i 's|^GRUB_CMDLINE_LINUX_DEFAULT="quiet"|#GRUB_CMDLINE_LINUX_DEFAULT="quiet"|' /etc/default/grub
  fi

  # Add the Intel parameters to the line if they don't already exist
  if ! grep -q 'intel_iommu=on iommu=pt' /etc/default/grub; then
    echo 'GRUB_CMDLINE_LINUX_DEFAULT="quiet intel_iommu=on iommu=pt"' >> /etc/default/grub
    msg_ok "Intel IOMMU parameters added to GRUB"
  else
    msg_info "Intel IOMMU parameters already exist"
  fi

  # Update GRUB
  update-grub &>/dev/null
  msg_ok "GRUB updated"

  # Add vfio modules to /etc/modules
  if ! grep -q 'vfio' /etc/modules; then
    echo -e "vfio\nvfio_iommu_type1\nvfio_pci" >> /etc/modules
    msg_ok "VFIO modules added to /etc/modules"
  else
    msg_info "VFIO modules already exist in /etc/modules"
  fi

  echo ""
  msg_info "A system reboot is required for changes to take effect."
}

# Function to configure AMD PCI Passthrough
configure_amd_pci_passthrough() {
  msg_info "Configuring PCI Passthrough for AMD Chipset"

  # Check if the line exists and comment it
  if grep -q '^GRUB_CMDLINE_LINUX_DEFAULT="quiet"' /etc/default/grub; then
    sed -i 's|^GRUB_CMDLINE_LINUX_DEFAULT="quiet"|#GRUB_CMDLINE_LINUX_DEFAULT="quiet"|' /etc/default/grub
  fi

  # Add the AMD parameters to the line if they don't already exist
  if ! grep -q 'amd_iommu=on iommu=pt' /etc/default/grub; then
    echo 'GRUB_CMDLINE_LINUX_DEFAULT="quiet amd_iommu=on iommu=pt"' >> /etc/default/grub
    msg_ok "AMD IOMMU parameters added to GRUB"
  else
    msg_info "AMD IOMMU parameters already exist"
  fi

  # Update GRUB
  update-grub &>/dev/null
  msg_ok "GRUB updated"

  # Add vfio modules to /etc/modules
  if ! grep -q 'vfio' /etc/modules; then
    echo -e "vfio\nvfio_iommu_type1\nvfio_pci" >> /etc/modules
    msg_ok "VFIO modules added to /etc/modules"
  else
    msg_info "VFIO modules already exist in /etc/modules"
  fi

  echo ""
  msg_info "A system reboot is required for changes to take effect."
}

# Function to revert PCI Passthrough
revert_pci_passthrough() {
  msg_info "Reverting PCI Passthrough configuration"

  # Check and comment Intel or AMD IOMMU configuration in GRUB
  if grep -q 'GRUB_CMDLINE_LINUX_DEFAULT="quiet intel_iommu=on iommu=pt"' /etc/default/grub; then
    sed -i 's|^GRUB_CMDLINE_LINUX_DEFAULT="quiet intel_iommu=on iommu=pt"|#GRUB_CMDLINE_LINUX_DEFAULT="quiet intel_iommu=on iommu=pt"|' /etc/default/grub
    msg_ok "Intel IOMMU configuration reverted"
  fi

  if grep -q 'GRUB_CMDLINE_LINUX_DEFAULT="quiet amd_iommu=on iommu=pt"' /etc/default/grub; then
    sed -i 's|^GRUB_CMDLINE_LINUX_DEFAULT="quiet amd_iommu=on iommu=pt"|#GRUB_CMDLINE_LINUX_DEFAULT="quiet amd_iommu=on iommu=pt"|' /etc/default/grub
    msg_ok "AMD IOMMU configuration reverted"
  fi

  # Uncomment default GRUB configuration
  if grep -q '^#GRUB_CMDLINE_LINUX_DEFAULT="quiet"' /etc/default/grub; then
    sed -i 's|^#GRUB_CMDLINE_LINUX_DEFAULT="quiet"|GRUB_CMDLINE_LINUX_DEFAULT="quiet"|' /etc/default/grub
    msg_ok "Default GRUB configuration restored"
  fi

  # Update GRUB
  update-grub &>/dev/null
  msg_ok "GRUB updated"

  # Remove VFIO modules from /etc/modules
  sed -i '/vfio/d' /etc/modules
  msg_ok "VFIO modules removed from /etc/modules"

  echo ""
  msg_info "A system reboot is required to fully revert changes."
}


main_menu() {
  while true; do
    CHOICE=$(whiptail --backtitle "Proxmox Server Setup" --title "Main Menu" --menu "Choose an option:" 15 60 6 \
    "1" "Update and Upgrade Proxmox" \
    "2" "Modify DNS" \
    "3" "Display Active Repositories" \
    "4" "Modify Repositories" \
    "5" "Enable PCI Passthrough" \
    "6" "Exit" 3>&2 2>&1 1>&3)

    case $CHOICE in
      1)
        update_proxmox
        ;;
      2)
        modify_dns
        ;;
      3)
        display_active_repos
        ;;
      4)
        modify_repos
        ;;
      5)
        enable_pci_passthrough 
        ;;
      6)
        clear
        exit 0
        ;;
      *)
        msg_error "Invalid option, please select again."
        ;;
    esac
  done
}


# Start the script
header_info
read -p "Press Enter to continue..."
main_menu
